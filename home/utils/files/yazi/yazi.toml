[mgr]
ratio = [1, 4, 3]
sort_by = "alphabetical"                 # Options: alphabetical, natural, mtime, ctime, atime, size, none
sort_sensitive = false
sort_reverse = false
sort_dir_first = true
sort_translit = false                    # Use transliteration for sorting (e.g., treat 'Ã©' like 'e')
linemode = "none"                        # Options: "none", "size", "permissions", "collapse" (icons only)
show_hidden = false                      # Set to true to always show hidden files by default
show_symlink = true
scrolloff = 5                            # Keep N lines visible above/below cursor when scrolling
mouse_events = ["click", "scroll"]
_v4_suppress_deprecation_warnings = true # Ignore deprecation warnings (plugins are noisy and maintainers have lives)

# Box border
border = "rounded"

[status]
component_left = [
    { type = "mode", format = " {} " },
    { type = "custom", command = "git_branch_display", format = "{}" },
    { type = "cwd", format = " {} " },
]
component_middle = [{ type = "position", format = " {}/{} " }]
component_right = [
    { type = "selection", format = " {} " },
    { type = "tasks", format = " Tasks: {} " },
]

[preview]
tab_size = 2
max_width = 600
max_height = 900
cache_dir = ""                 # Leave empty to use default cache location
image_filter = "triangle"      # Affects image scaling quality. Options: nearest, triangle, catmull-rom, gaussian, lanczos3
image_quality = 90             # For formats supporting quality settings (e.g., JPEG)
sixel_fraction = 15            # For sixel image rendering
ueberzug_scale = 1             # Adjust scale factor for ueberzug image previews if needed
ueberzug_offset = [0, 0, 0, 0] # [x, y, width, height] offset for ueberzug

[opener]
edit = [
    { run = '${EDITOR:=nvim} "$@"', desc = "${EDITOR:-nvim}", block = true, for = "unix" }, # nvim is fallback
]
open = [{ run = 'xdg-open "$1"', desc = "Open", for = "linux" }]
reveal = [
    { run = 'xdg-open "$(dirname "$1")"', desc = "Reveal", for = "linux" },
]
extract = [
    { run = 'ya pub extract --list "$@"', desc = "Extract here", for = "unix" },
]
play = [{ run = 'mpv --force-window "$@"', orphan = true, for = "unix" }]

[open]
rules = [
    { mime = "text/markdown", use = "markdown" },

    { name = "*/", use = [
        "edit",
        "open",
        "reveal",
    ] },
    # Folder
    # Text (Markdown handled separately by previewer rule)
    { mime = "text/*", use = [
        "edit",
        "reveal",
    ] },
    # Image
    { mime = "image/*", use = [
        "open",
        "reveal",
    ] },
    # Media
    { mime = "{audio,video}/*", use = [
        "play",
        "reveal",
    ] },
    # Archive
    { mime = "application/{,g}zip", use = [
        "extract",
        "reveal",
    ] },
    { mime = "application/x-{tar,bzip*,7z-compressed,xz,rar}", use = [
        "extract",
        "reveal",
    ] },
    # JSON / JS
    { mime = "application/{json,x-ndjson}", use = [
        "edit",
        "reveal",
    ] },
    { mime = "*/javascript", use = [
        "edit",
        "reveal",
    ] },
    # PDF
    { mime = "application/pdf", use = [
        "open",
        "edit",
        "reveal",
    ] },
    # Empty file
    { mime = "inode/x-empty", use = [
        "edit",
        "reveal",
    ] },
    # Fallback
    { name = "*", use = [
        "open",
        "reveal",
    ] },
]

[tasks]
micro_workers = 10       # For UI-related tasks
macro_workers = 25       # For background tasks like previews
bizarre_retry = 5        # Retries for potentially recoverable errors
image_alloc = 536870912  # 512MB - Max memory for image decoding pool
image_bound = [0, 0]     # Max dimensions for image previews (0 = unbounded)
suppress_preload = false # Set to true to disable preloading previews for performance

[plugin]
fetchers = [
    { id = "mime", name = "*", run = "mime", if = "!mime", prio = "high" },
]

prepend_fetchers = [
    { id = "git", name = "*", run = "git" },  # For files
    { id = "git", name = "*/", run = "git" }, # For directories (to show if they contain changes)
]

prepend_previewers = [
    # Archive previewer
    { mime = "application/*zip", run = "ouch" },
    { mime = "application/x-tar", run = "ouch" },
    { mime = "application/x-bzip2", run = "ouch" },
    { mime = "application/x-7z-compressed", run = "ouch" },
    { mime = "application/x-rar", run = "ouch" },
    { mime = "application/x-xz", run = "ouch" },
    { mime = "application/xz", run = "ouch" },
]

# -- Preloaders prepare data for previewers (e.g., decode images) --
preloaders = [
    # Image
    { mime = "image/{avif,heic,jxl,svg+xml}", run = "magick" }, # Use ImageMagick for these
    { mime = "image/*", run = "image" },                        # Use internal Yazi image decoder
    # Video
    { mime = "video/*", run = "video" },
    # PDF
    { mime = "application/pdf", run = "pdf" },
    # Font
    { mime = "font/*", run = "font" },
    { mime = "application/vnd.ms-opentype", run = "font" },
]

previewers = [
    # Folder
    { name = "*/", run = "folder", sync = true },
    # Code (will now be skipped for text/markdown due to the rule above)
    { mime = "text/*", run = "code" },
    { mime = "*/{xml,javascript,x-wine-extension-ini}", run = "code" },
    # JSON
    { mime = "application/{json,x-ndjson}", run = "json" },
    # Image
    { mime = "image/{avif,heic,jxl,svg+xml}", run = "magick" },
    { mime = "image/*", run = "image" },
    # Video
    { mime = "video/*", run = "video" },
    # PDF
    { mime = "application/pdf", run = "pdf" },
    # Archive
    { mime = "application/{,g}zip", run = "archive" },
    { mime = "application/x-{tar,bzip*,7z-compressed,xz,rar,iso9660-image}", run = "archive" },
    # Font
    { mime = "font/*", run = "font" },
    { mime = "application/vnd.ms-opentype", run = "font" },
    # Fallback (shows basic file info)
    { name = "*", run = "file" },
]

[input]
# -- Input prompts configuration --
cursor_blink = false

# cd
cd_title = "Change directory:"
cd_origin = "top-center"
cd_offset = [0, 2, 50, 3]      # [x, y, width, height] relative to origin

# create
create_title = ["Create:", "Create:"]
create_origin = "top-center"
create_offset = [0, 2, 50, 3]

# rename
rename_title = "Rename:"
rename_origin = "hovered"     # Position relative to the hovered file
rename_offset = [0, 1, 50, 3]

# trash
trash_title = "Move {n} selected file{s} to trash? (y/N)"
trash_origin = "top-center"
trash_offset = [0, 2, 50, 3]

# delete
delete_title = "Delete {n} selected file{s} permanently? (y/N)"
delete_origin = "top-center"
delete_offset = [0, 2, 50, 3]

# filter
filter_title = "Filter:"
filter_origin = "top-center"
filter_offset = [0, 2, 50, 3]

# find
find_title = [
    "Find next:",
    "Find previous:",
] # Array used for next/previous context
find_origin = "top-center"
find_offset = [0, 2, 50, 3]

# search
search_title = "Search via {n}:" # {n} is replaced by search engine name
search_origin = "top-center"
search_offset = [0, 2, 50, 3]

# shell
shell_title = [
    "Shell:",
    "Shell (block):",
] # Array used for normal/blocking context
shell_origin = "top-center"
shell_offset = [0, 2, 50, 3]

# overwrite
overwrite_title = "Overwrite an existing file? (y/N)"
overwrite_origin = "top-center"
overwrite_offset = [0, 2, 50, 3]

# quit
quit_title = "{n} task{s} running, sure to quit? (y/N)"
quit_origin = "top-center"
quit_offset = [0, 2, 50, 3]

[select]
# -- Configuration for the 'open with' selection menu --
open_title = "Open with:"
open_origin = "hovered"
open_offset = [0, 1, 50, 7] # Wider height for selection list

[which]
# -- Configuration for command selection (e.g., multiple 'edit' options) --
sort_by = "none"       # Keep order defined in [opener]
sort_sensitive = false
sort_reverse = false
sort_translit = false

[log]
enabled = false
