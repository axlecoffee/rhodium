#!/usr/bin/env bash

# Script to gather detailed hardware information for NixOS Flake hostData

# --- Configuration ---
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" &>/dev/null && pwd)"
OUTPUT_DIR="${SCRIPT_DIR}/../../info"

if ! mkdir -p "${OUTPUT_DIR}"; then
  echo "ERROR: Could not create output directory: ${OUTPUT_DIR}" >&2
  exit 1
fi

HOSTNAME_SANITISED=$(hostname | sed 's/[^a-zA-Z0-9_-]//g')
OUTPUT_FILE="${OUTPUT_DIR}/machine_details_${HOSTNAME_SANITISED}_$(date +%Y%m%d_%H%M%S).txt"

# --- Function to run commands and collect their output ---
collect_hardware_info() {
  echo "### Hardware Information Report ###"
  echo "Generated by: ${BASH_SOURCE[0]}"
  echo "Report Timestamp: $(date)"
  echo "Effective User: $(whoami) (sudo might be needed for some commands)"
  echo "-----------------------------------"

  run_and_print() {
    local header="$1"
    local cmd="$2"
    echo -e "\n## ${header} ##"
    if eval "${cmd}"; then
      :
    else
      echo "ERROR: Command failed or produced no output: ${cmd}"
    fi
    echo "-----------------------------------"
  }

  run_and_print_no_fail() {
    local header="$1"
    local cmd="$2"
    echo -e "\n## ${header} ##"
    eval "${cmd}"
    echo "-----------------------------------"
  }

  if [[ $EUID -ne 0 ]]; then
    echo "INFO: This script was not run as root. Some hardware details (especially from dmidecode) might be incomplete."
    echo "INFO: For full details, please run with sudo."
    echo "-----------------------------------"
  fi

  # --- System & BIOS ---
  run_and_print "System Information (Manufacturer, Product, Version, BIOS)" \
    "sudo dmidecode -s system-manufacturer && \
         sudo dmidecode -s system-product-name && \
         sudo dmidecode -s system-version && \
         sudo dmidecode -s bios-vendor && \
         sudo dmidecode -s bios-version && \
         sudo dmidecode -s bios-release-date"

  run_and_print "Baseboard (Motherboard) Information" \
    "sudo dmidecode -s baseboard-manufacturer && \
         sudo dmidecode -s baseboard-product-name && \
         sudo dmidecode -s baseboard-version"

  run_and_print "Chassis Information (Form Factor)" \
    "sudo dmidecode -s chassis-type && sudo dmidecode -s chassis-manufacturer"

  # --- CPU ---
  run_and_print "CPU Information (lscpu)" "lscpu"
  echo "CPU Model Name (for convenience): $(lscpu | grep 'Model name:' | sed -e 's/Model name:\s*//')"
  echo "CPU Vendor (for convenience): $(lscpu | grep 'Vendor ID:' | sed -e 's/Vendor ID:\s*//')"
  echo "CPU Cores (for convenience): $(lscpu | grep '^CPU(s):' | awk '{print $2}')"
  CORES_PER_SOCKET=$(lscpu | grep '^Core(s) per socket:' | awk '{print $4}')
  THREADS_PER_CORE=$(lscpu | grep '^Thread(s) per core:' | awk '{print $4}')
  if [[ -n "$CORES_PER_SOCKET" && -n "$THREADS_PER_CORE" ]]; then
    TOTAL_THREADS=$((CORES_PER_SOCKET * THREADS_PER_CORE))
    echo "CPU Threads (calculated): $TOTAL_THREADS"
  else
    echo "CPU Threads (could not calculate reliably from lscpu)"
  fi
  echo "-----------------------------------"

  # --- Memory (RAM) ---
  run_and_print "Memory (RAM) Details (dmidecode)" \
    "sudo dmidecode -t memory | grep -A6 'Memory Device' | grep -E 'Size:|Type:|Speed:|Manufacturer:|Part Number:|Configured Clock Speed:|Rank:' | grep -v 'No Module Installed'"
  TOTAL_RAM_KB=$(grep MemTotal /proc/meminfo | awk '{print $2}')
  TOTAL_RAM_GB=$(awk "BEGIN {printf \"%.2f\", ${TOTAL_RAM_KB}/1024/1024}")
  echo "Total RAM: ${TOTAL_RAM_GB} GB (from /proc/meminfo)"
  echo "-----------------------------------"

  # --- Storage ---
  run_and_print "Storage Devices (lsblk)" \
    "lsblk -bno NAME,TYPE,MODEL,VENDOR,SIZE,TRAN,ROTA,FSTYPE,MOUNTPOINT,PATH,SERIAL,WWN,PARTLABEL,LABEL"
  echo "Note: For 'sizeGB', convert SIZE (bytes) from lsblk. ROTA=0 for SSD/NVMe, ROTA=1 for HDD."
  echo "Note: Use 'sudo smartctl -i /dev/sdX' or 'sudo nvme smart-log /dev/nvmeX' for more drive details."
  echo "-----------------------------------"

  # --- Graphics ---
  run_and_print "Graphics Controllers (lspci)" \
    "lspci -nnk | grep -iEA5 'VGA compatible controller|3D controller|Display controller'"
  run_and_print_no_fail "OpenGL Renderer (glxinfo)" \
    "glxinfo -B 2>/dev/null | grep -E 'OpenGL vendor string|OpenGL renderer string|OpenGL version string|Memory info' || echo 'glxinfo not found or error.'"
  run_and_print_no_fail "Vulkan Devices (vulkaninfo)" \
    "vulkaninfo --summary 2>/dev/null | grep -E 'Device Name|Device Type|Driver Info|Vulkan API Version' || echo 'vulkan-tools not found or no Vulkan device.'"
  echo "Note: VRAM for AMD: check /sys/class/drm/cardX/device/mem_info_vram_total (X is 0,1,..)"
  echo "Note: VRAM for NVIDIA: use nvidia-smi"
  echo "-----------------------------------"

  # --- Display ---
  echo -e "\n## Display Information ##"
  echo "--- X11 (xrandr - if active) ---"
  if command -v xrandr &>/dev/null && xrandr --query &>/dev/null; then
    xrandr --verbose | grep -E '^\S.* connected|Identifier|Gamma|max bpc|EDID:' -A 10 | grep -Pv '^\s*(CRTC|gyro|orientation|bottom|right|left|top):'
  else
    echo "xrandr not available or not in an X11 session."
  fi
  echo "--- Wayland (compositor specific - try common ones) ---"
  if command -v swaymsg &>/dev/null; then
    echo "Attempting swaymsg -t get_outputs (for Sway/Hyprland):"
    swaymsg -t get_outputs || echo "swaymsg found but get_outputs failed."
  elif command -v kscreen-doctor &>/dev/null; then
    echo "Attempting kscreen-doctor -o (for KDE Plasma Wayland):"
    kscreen-doctor -o || echo "kscreen-doctor found but failed."
  else
    echo "Common Wayland display info tools (swaymsg, kscreen-doctor) not found."
  fi
  echo "--- EDID (Detailed Monitor Info - requires read-edid package) ---"
  if command -v get-edid &>/dev/null && command -v parse-edid &>/dev/null; then
    echo "Attempting to read EDID (may require sudo for some displays/laptops):"
    sudo get-edid | parse-edid
  else
    echo "read-edid tools not found. Consider installing 'read-edid' package."
  fi
  echo "-----------------------------------"

  # --- Network ---
  run_and_print "Network Controllers (lspci for Ethernet/WiFi, lsusb for USB adapters)" \
    "lspci -nnk | grep -iEA4 'network|ethernet|wireless' && echo '--- USB Network Devices ---' && lsusb | grep -iE 'net|wlan|wifi|ethernet|bluetooth'"
  run_and_print "Network Interfaces (ip link)" "ip link show"
  run_and_print_no_fail "WiFi Details (iw dev - if WiFi present)" "iw dev || echo 'iw command not found or no WiFi device.'"
  echo "-----------------------------------"

  # --- Audio ---
  run_and_print "Audio Devices (lspci)" "lspci -nnk | grep -iA3 audio"
  run_and_print "Audio Playback Devices & Codecs (aplay -l)" "aplay -l"
  echo "Note: For codec, look at card X, device Y: XXXX [CodecName] in aplay -l."
  echo "Note: Driver usually snd_hda_intel for integrated, or specific to USB audio."
  echo "-----------------------------------"

  # --- Ports & Input ---
  run_and_print "USB Devices Tree (lsusb -tv)" "lsusb -tv"
  echo -e "\n## Input Devices (libinput list-devices - requires libinput-tools) ##"
  if command -v libinput &>/dev/null && command -v sudo &>/dev/null && sudo libinput list-devices &>/dev/null; then
    sudo libinput list-devices --verbose
  else
    echo "libinput list-devices not found, sudo not available, or command failed. Install 'libinput' (NixOS) or 'libinput-tools'."
  fi
  echo "Note: SD Card reader often a USB device (lsusb) or PCI (lspci 'memory controller')."
  echo "Note: Webcam almost always a USB device (lsusb)."
  echo "Note: Fingerprint reader usually a USB device (lsusb)."
  echo "Note: HDMI/DisplayPort versions are usually not reported by OS; check device specifications."
  echo "Note: Thunderbolt: 'lspci | grep -i thunderbolt' or (if bolt package installed) 'boltctl list'."
  echo "-----------------------------------"

  # --- Battery (Laptops) ---
  echo -e "\n## Battery Information (if present) ##"
  if compgen -G "/org/freedesktop/UPower/devices/battery_BAT*" >/dev/null; then
    for bat_path in $(upower -e | grep battery); do
      run_and_print "Battery Details (${bat_path})" "upower -i ${bat_path}"
    done
  else
    echo "No battery found by upower (this is normal for desktops)."
  fi
  echo "-----------------------------------"

  echo -e "\n### End of Report ###"
  echo "Manual verification and cross-referencing with device specifications is recommended."
  echo "Some details like exact microarchitecture, display panel tech (if not in EDID),"
  echo "or specific port versions might require looking up product models."
}

# --- Main execution ---
if collect_hardware_info >"${OUTPUT_FILE}" 2>&1; then
  echo "Hardware information report successfully saved to: ${OUTPUT_FILE}"
  echo "Please review the file for details."
else
  echo "ERROR: There was an issue generating or saving the hardware report." >&2
  echo "Partial log might be in: ${OUTPUT_FILE}" >&2
  exit 1
fi

exit 0
